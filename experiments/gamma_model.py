# generated by datamodel-codegen:
#   filename:  gamma.json
#   timestamp: 2025-07-14T17:29:01+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel


class Event(BaseModel):
    id: str
    ticker: str
    slug: str
    title: str
    description: str
    startDate: str
    creationDate: str
    endDate: str
    image: str
    icon: str
    active: bool
    closed: bool
    archived: bool
    featured: bool
    restricted: bool
    liquidity: int
    volume: float
    openInterest: int
    sortBy: str
    category: str
    published_at: str
    createdAt: str
    updatedAt: str
    competitive: int
    volume24hr: int
    volume1wk: int
    volume1mo: int
    volume1yr: int
    liquidityAmm: int
    liquidityClob: int
    commentCount: int
    cyom: bool
    closedTime: str
    showAllOutcomes: bool
    showMarketImages: bool
    enableNegRisk: bool
    negRiskAugmented: bool
    pendingDeployment: bool
    deploying: bool


class GammaModel(BaseModel):
    id: str
    question: str
    conditionId: str
    slug: str
    twitterCardImage: str
    endDate: str
    category: str
    liquidity: str
    image: str
    icon: str
    description: str
    outcomes: str
    outcomePrices: str
    volume: str
    active: bool
    marketType: str
    closed: bool
    marketMakerAddress: str
    updatedBy: int
    createdAt: str
    updatedAt: str
    closedTime: str
    mailchimpTag: Optional[str] = None
    archived: bool
    restricted: bool
    volumeNum: float
    liquidityNum: int
    endDateIso: str
    hasReviewedDates: bool
    readyForCron: bool
    volume24hr: int
    volume1wk: int
    volume1mo: int
    volume1yr: int
    clobTokenIds: str
    fpmmLive: bool
    volume1wkAmm: int
    volume1moAmm: int
    volume1yrAmm: int
    volume1wkClob: int
    volume1moClob: int
    volume1yrClob: int
    events: List[Event]
    creator: str
    ready: bool
    funded: bool
    cyom: bool
    competitive: int
    pagerDutyNotificationEnabled: bool
    approved: bool
    rewardsMinSize: int
    rewardsMaxSpread: int
    spread: int
    oneDayPriceChange: int
    oneHourPriceChange: int
    oneWeekPriceChange: int
    oneMonthPriceChange: int
    oneYearPriceChange: int
    lastTradePrice: int
    bestBid: int
    bestAsk: int
    clearBookOnStart: bool
    manualActivation: bool
    negRiskOther: bool
    umaResolutionStatuses: str
    pendingDeployment: bool
    deploying: bool
    rfqEnabled: bool
